package external

import (
    "bytes"
    "encoding/json"
    "fmt"
    "io/ioutil"
    "net/http"
    "strconv"
    "strings"
)

func hex2int(hexStr string) int {
    cleaned := strings.Replace(hexStr, "0x", "", -1)
    result, _ := strconv.ParseUint(cleaned, 16, 64)
    return int(result)
}

// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
// curl -s -X POST -H 'Content-Type: application/json' --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":83}' 127.0.0.1:7345
type parityPayload struct {
    Jsonrpc string        `json:"jsonrpc"`
    Method  string        `json:"method"`
    Params  []interface{} `json:"params"`
    ID      int           `json:"id"`
}

func GetHeightFromParityRpc(url string) (int, string) {
    payload := parityPayload{
        Jsonrpc: "2.0",
        Method:  "eth_blockNumber",
        ID:      1,
    }

    payloadBytes, err := json.Marshal(payload)
    if err != nil {
        return 0, fmt.Sprintf(`error: GetHeightFromParityRpc: Failed to json.Marshal(%v): %s`, payload, err)
    }
    payloadReader := bytes.NewReader(payloadBytes)

    req, err := http.NewRequest("POST", url, payloadReader)
    if err != nil {
        return 0, fmt.Sprintf(`error: GetHeightFromParityRpc: Failed to prepare post request %s`, err)
    }

    req.Header.Set("Content-Type", "application/json")

    resp, err := http.DefaultClient.Do(req)

    if err != nil {
        return 0, fmt.Sprintf(`error: GetHeightFromParityRpc: Failed to run post request %s`, err)
    }

    defer resp.Body.Close()
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        return 0, fmt.Sprintf(`error: GetHeightFromParityRpc: Failed to read body, err: '%s'`, err)
    }

    var v interface{}
    err = json.Unmarshal(body, &v)
    if err != nil {
        return 0, fmt.Sprintf(`error: GetHeightFromParityRpc: json.Unmarshal, err: '%s'`, err)
    }
    mm := v.(map[string]interface{})

    return hex2int(mm["result"].(string)), ""
}
